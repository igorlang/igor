using Igor.CSharp.Model;
using Igor.Text;
using System.Linq;

namespace Igor.CSharp.Render
{
    public class CsModuleRenderer : Renderer
    {
        public string FileHeader =>
$@"Author: Igor compiler
Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        public void WriteFile(CsFile file)
        {
            void WriteEnumField(CsEnumField field)
            {
                WriteSummary(field.Summary);
                Blocks(field.Attributes.Select(a => $"[{a}]"));
                Line($"{field.Name} = {field.Value},");
            }

            void WriteEnum(CsEnum e)
            {
                WriteSummary(e.Summary);
                var csIntTypeDeclaration = e.IntType == null ? null : $" : {e.IntType}";
                Blocks(e.Attributes.Select(a => $"[{a}]"));
                Line($"public enum {e.Name}{csIntTypeDeclaration}");
                Line("{");
                Indent();
                ForEach(e.Fields, WriteEnumField);
                Outdent();
                Line("}");
            }

            void WriteClass(CsClass c)
            {
                WriteSummary(c.Summary);
                var baseClass = c.BaseClass.YieldIfNotNull();
                var inherits = baseClass.Concat(c.Interfaces).ToArray();
                var csParent = inherits.Length == 0 ? null : " : " + inherits.JoinStrings(", ");
                var kind = c.Kind.ToString().ToLower();
                var access = c.AccessModifier.ToString().ToLower();
                var partial = c.Partial ? "partial" : "";
                var @abstract = c.Abstract ? "abstract" : "";
                var @static = c.Static ? "static" : "";
                var @sealed = c.Sealed && c.Kind == ClassKind.Class ? "sealed" : "";
                var genericArgs = c.GenericArgs == null || c.GenericArgs.Count == 0 ? null : "<" + c.GenericArgs.JoinStrings(", ") + ">";
                Blocks(c.Attributes.Select(a => $"[{a}]"));
                Line($"{access} {@static} {@abstract} {@sealed} {partial} {kind} {c.Name}{genericArgs}{csParent}");
                Line("{");
                Indent();
                ForEach(c.InnerClasses, WriteClass, true);
                ForEach(c.Properties, WriteProperty, true);
                Blocks(c.Constructors, true);
                Blocks(c.Methods, true);
                Outdent();
                Line("}");
            }

            void WriteNamespace(CsNamespace n)
            {
                if (n.Namespace != null)
                {
                    Line($"namespace {n.Namespace}");
                    Line("{");
                    Indent();
                }

                ForEach(n.Enums, WriteEnum, true);
                ForEach(n.Classes, WriteClass, true);
                ForEach(n.Namespaces, WriteNamespace, true);

                if (n.Namespace != null)
                {
                    Outdent();
                    Line("}");
                }
            }

            Comment(FileHeader, "// ");
            EmptyLine();
            Blocks(file.Usings, ns => $"using {ns};");
            EmptyLine();
            Blocks(file.UsingAliases.Select(pair => $"using {pair.Key} = {pair.Value};"));
            ForEach(file.Namespaces.OrderBy(n => n.Namespace), WriteNamespace, true);
        }

        private void WriteSummary(string summary)
        {
            if (summary != null)
            {
                Comment("<summary>", "/// ");
                Comment(summary, "/// ");
                Comment("</summary>", "/// ");
            }
        }

        private void WriteProperty(CsProperty prop)
        {
            WriteSummary(prop.Summary);
            Blocks(prop.Attributes.Select(a => $"[{a}]"));
            Block(prop.Declaration);
        }

        protected override EmptyLineMode GetEmptyLineModeBetweenLines(string prev, string next)
        {
            if (prev == "{")
                return EmptyLineMode.Forbid;
            else if (prev.EndsWith(":"))
                return EmptyLineMode.Forbid;
            else if (prev.StartsWith("[") && prev.EndsWith("]"))
                return EmptyLineMode.Forbid;
            else if (next == "else")
                return EmptyLineMode.Forbid;
            else if (next == "}")
                return EmptyLineMode.Forbid;
            else
                return EmptyLineMode.Keep;
        }

        public static string Render(CsFile file)
        {
            var renderer = new CsModuleRenderer { Tab = "    ", RemoveDoubleSpaces = true };
            renderer.WriteFile(file);
            return renderer.Build();
        }
    }
}
