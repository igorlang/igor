using Igor.Go.Model;
using Igor.Text;
using System.Linq;

namespace Igor.Go.Render
{
    public class GoFileRenderer : Renderer
    {
        public string FileHeader =>
$@"Author: Igor compiler
Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        private void WriteEnum(GoEnum e)
        {
            Line($"type {e.Name} {e.BaseType}");
            EmptyLine();
            Comment($"{e.Name} Enum definitions", "// ");
            Line("const (");
            Indent();
            Table(e.Fields, f => new[] { f.Name, e.Name, $"= {f.Value}" }, beforeRow: f => Comment(f.Comment, "// "));
            Outdent();
            Line(")");
        }

        private void DeclareInterface(GoInterface intf)
        {
            Line($@"type {intf.Name} interface {{");
            Indent();
            Blocks(intf.Functions);
            Outdent();
            Line("}");
        }

        private void DeclareStruct(GoStruct c)
        {
            var genericArgs = c.GenericArgs == null || c.GenericArgs.Count == 0 ? null : "[" + c.GenericArgs.JoinStrings(", ") + " any]";
            Line($@"type {c.Name}{genericArgs} struct {{");
            Indent();
            foreach (var embed in c.Embeds)
                Line(embed);
            string FormatTags(GoProperty p)
            {
                if (p.Tags.Count == 0)
                    return "";
                else
                    return $"`{p.Tags.JoinStrings(" ", pair => $@"{pair.Key}:""{pair.Value}""")}`";
            }
            void BeforeRow(GoProperty p)
            {
                if (p.Comment != null)
                {
                    if (c.Properties.First() != p)
                        EmptyLine();
                    Comment(p.Comment, "// ");
                }
            }
            Table(c.Properties, p => new[] { p.Name.AssertNotNull(nameof(p.Name)), p.Type.AssertNotNull(nameof(p.Type)), FormatTags(p) }, beforeRow: BeforeRow);
            Outdent();
            Line("}");
            EmptyLine();
            Blocks(c.Methods);
        }

        private void DefineType(GoTypeDefinition def)
        {
            var genericArgs = def.GenericArgs == null || def.GenericArgs.Count == 0 ? null : $"[{def.GenericArgs.JoinStrings(", ", a => $@"{a.Key} {a.Value}")}]";
            Line($@"type {def.Name}{genericArgs} {def.Type}");
        }

        private void WriteDeclaration(GoDeclaration decl)
        {
            Comment(decl.Comment, "// ");

            switch (decl)
            {
                case GoEnum goEnum:
                    WriteEnum(goEnum);
                    break;

                case GoStruct goStruct:
                    DeclareStruct(goStruct);
                    break;

                case GoInterface goIntf:
                    DeclareInterface(goIntf);
                    break;

                case GoRawDeclaration goRaw:
                    Block(goRaw.Text);
                    break;

                case GoTypeDefinition goDef:
                    DefineType(goDef);
                    break;
            }
        }

        public void WriteFile(GoFile file)
        {
            Comment(FileHeader, "// ");
            EmptyLine();
            Line($"package {file.PackageName}");
            EmptyLine();

            if (file.Imports.Any())
            {
                var simpleImports = file.Imports.Where(imp => imp.Path.IndexOf('.') < 0).ToList();
                var complexImports = file.Imports.Where(imp => imp.Path.IndexOf('.') >= 0).ToList();
                Line("import (");
                Indent();
                string FormatImport(GoImport import)
                {
                    if (import.Identifier != null)
                        return $@"{import.Identifier} ""{import.Path}""";
                    else
                        return import.Path.Quoted();
                }
                Blocks(simpleImports.Select(FormatImport));
                if (simpleImports.Any() && complexImports.Any())
                    EmptyLine();
                Blocks(complexImports.Select(FormatImport));
                Outdent();
                Line(")");
            }

            var declsByGroup = file.Declarations.GroupBy(d => d.Group).SelectMany(g => g);
            ForEach(declsByGroup, WriteDeclaration, emptyLineDelimiter: true);
        }

        public static string Render(GoFile file)
        {
            var renderer = new GoFileRenderer { Tab = "\t", RemoveDoubleSpaces = false };
            renderer.WriteFile(file);
            return renderer.Build();
        }
    }
}
