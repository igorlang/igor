using Igor.Erlang.Model;
using System.Linq;

namespace Igor.Erlang.Render
{
    public class ErlModuleRenderer : ErlRenderer
    {
        public string FileHeader =>
$@"@author Igor compiler
@doc Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        public void WriteModule(ErlModule mod)
        {
            Comment(FileHeader, "%% ");
            EmptyLine();
            Comment(mod.Comment, "%% ");
            Line($"-module({mod.Name}).");
            EmptyLine();
            Blocks(mod.IncludeLibs, format: path => $@"-include_lib(""{path}"").");
            Blocks(mod.Includes, format: path => $@"-include(""{path}"").");
            EmptyLine();
            Blocks(mod.Behaviours, b => $"-behaviour({b}).");
            EmptyLine();
            if (mod.Exports.Any())
            {
                Line("-export([");
                Indent();
                Blocks(mod.Exports, delimiter: ",");
                Outdent();
                Line("]).");
            }
            EmptyLine();
            if (mod.ExportTypes.Any())
            {
                Line("-export_type([");
                Indent();
                Blocks(mod.ExportTypes, delimiter: ",");
                Outdent();
                Line("]).");
            }
            EmptyLine();
            Blocks(mod.Callbacks);
            EmptyLine();
            Blocks(mod.Types);
            EmptyLine();
            Blocks(mod.Defines);
            EmptyLine();
            Blocks(mod.DialyzerOpts, format: opt => $"-dialyzer({opt}).");
            EmptyLine();
            Blocks(mod.Functions, true);
        }

        public static string Render(ErlModule mod)
        {
            var renderer = new ErlModuleRenderer();
            renderer.WriteModule(mod);
            return renderer.Build();
        }
    }
}
