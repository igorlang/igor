using Igor.Python.Model;
using Igor.Text;
using System.Linq;

namespace Igor.Python.Render
{
    public class PythonFileRenderer : Renderer
    {
        public string FileHeader =>
$@"Author: Igor compiler
Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        private void WriteImport(PythonImport import)
        {
            if (import.ImportTypes.Any())
                Line($@"from {import.Module} import {import.ImportTypes.JoinStrings(", ")}");
            else
                Line($@"import {import.Module}");
        }

        private void WriteEnum(PythonEnum e)
        {
            Line($"class {e.Name}(Enum):");
            Indent();
            Blocks(e.Fields.Select(f => $@"{f.Name} = {f.Value}"));
            Outdent();
        }

        private void DeclareClass(PythonClass c)
        {
            var baseClass = c.BaseClass == null ? "" : "(" + c.BaseClass + ")";
            Line($"class {c.Name}{baseClass}:");
            Indent();
            Blocks(c.Properties, emptyLineDelimiter: false);
            Blocks(c.Functions, emptyLineDelimiter: true);
            Outdent();
        }

        public void WriteFile(PythonFile file)
        {
            Comment(FileHeader, "# ");
            EmptyLine();
            ForEach(file.Imports, WriteImport, emptyLineDelimiter: false);
            ForEach(file.Enums, WriteEnum, emptyLineDelimiter: true);
            ForEach(file.Classes, DeclareClass, emptyLineDelimiter: true);
            Blocks(file.Declarations, emptyLineDelimiter: true);
        }

        protected override EmptyLineMode GetEmptyLineModeBetweenLines(string prev, string next)
        {
            if (prev != null && prev.EndsWith(":"))
                return EmptyLineMode.Forbid;
            return base.GetEmptyLineModeBetweenLines(prev, next);
        }

        public static string Render(PythonFile file)
        {
            var renderer = new PythonFileRenderer { Tab = "    ", RemoveDoubleSpaces = true };
            renderer.WriteFile(file);
            return renderer.Build();
        }
    }
}
