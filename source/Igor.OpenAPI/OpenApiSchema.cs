// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

using System.Collections.Generic;

using JsonSerializer = Json.Serialization.JsonSerializer;

namespace OpenAPI
{
    public enum JsonSchemaType
    {
        Null = 1,
        Boolean = 2,
        Object = 3,
        Array = 4,
        Number = 5,
        Integer = 6,
        String = 7,
    }

    public enum ParameterLocation
    {
        /// <summary>
        /// Used together with Path Templating, where the parameter value is actually part of the operation's URL.
        /// This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.
        /// </summary>
        Path = 1,
        /// <summary>
        /// Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.
        /// </summary>
        Query = 2,
        /// <summary>
        /// Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.
        /// </summary>
        Header = 3,
        /// <summary>
        /// Used to pass a specific cookie value to the API.
        /// </summary>
        Cookie = 4,
    }

    public enum ParameterStyle
    {
        Matrix = 1,
        Label = 2,
        Form = 3,
        Simple = 4,
        SpaceDelimited = 5,
        PipeDelimited = 6,
        DeepObject = 7,
    }

    public sealed class SchemaObject
    {
        public string Title { get; set; }

        public string Description { get; set; }

        public Json.ImmutableJson Default { get; set; }

        public JsonSchemaType? Type { get; set; }

        public MaybeRef<SchemaObject> Items { get; set; }

        public Dictionary<string, MaybeRef<SchemaObject>> Properties { get; set; }

        public List<string> Required { get; set; }

        public List<MaybeRef<SchemaObject>> AllOf { get; set; }

        public bool? Nullable { get; set; } = false;
    }

    public sealed class ContactObject
    {
        /// <summary>
        /// The identifying name of the contact person/organization.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The URL pointing to the contact information. MUST be in the format of a URL.
        /// </summary>
        public string Url { get; set; }

        /// <summary>
        /// The email address of the contact person/organization. MUST be in the format of an email address.
        /// </summary>
        public string Email { get; set; }
    }

    public sealed class LicenseObject
    {
        /// <summary>
        /// The license name used for the API.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// A URL to the license used for the API. MUST be in the format of a URL.
        /// </summary>
        public string Url { get; set; }
    }

    public sealed class InfoObject
    {
        /// <summary>
        /// The title of the application.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// A short description of the application. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// A URL to the Terms of Service for the API. MUST be in the format of a URL.
        /// </summary>
        public string TermsOfService { get; set; }

        /// <summary>
        /// The contact information for the exposed API.
        /// </summary>
        public ContactObject Contact { get; set; }

        /// <summary>
        /// The license information for the exposed API.
        /// </summary>
        public LicenseObject License { get; set; }

        /// <summary>
        /// The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).
        /// </summary>
        public string Version { get; set; }
    }

    public sealed class ServerVariableObject
    {
        /// <summary>
        /// An enumeration of string values to be used if the substitution options are from a limited set.
        /// </summary>
        public List<string> Enum { get; set; }

        /// <summary>
        /// The default value to use for substitution, and to send, if an alternate value is not supplied.
        /// Unlike the Schema Object's default, this value MUST be provided by the consumer.
        /// </summary>
        public string Default { get; set; }

        /// <summary>
        /// An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }
    }

    public sealed class ServerObject
    {
        /// <summary>
        /// A URL to the target host. This URL supports Server Variables and MAY be relative,
        /// to indicate that the host location is relative to the location where the OpenAPI document is being served.
        /// Variable substitutions will be made when a variable is named in {brackets}.
        /// </summary>
        public string Url { get; set; }

        /// <summary>
        /// An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// A map between a variable name and its value. The value is used for substitution in the server's URL template.
        /// </summary>
        public Dictionary<string, ServerVariableObject> Variables { get; set; }
    }

    public sealed class ComponentsObject
    {
        /// <summary>
        /// An object to hold reusable Schema Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<SchemaObject>> Schemas { get; set; }

        /// <summary>
        /// An object to hold reusable Response Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<ResponseObject>> Responses { get; set; }

        /// <summary>
        /// An object to hold reusable Parameter Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<ParameterObject>> Parameters { get; set; }

        /// <summary>
        /// An object to hold reusable Example Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<ExampleObject>> Examples { get; set; }

        /// <summary>
        /// An object to hold reusable Request Body Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<RequestBodyObject>> RequestBodies { get; set; }

        /// <summary>
        /// An object to hold reusable Header Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<HeaderObject>> Headers { get; set; }

        /// <summary>
        /// An object to hold reusable Security Scheme Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<Json.ImmutableJson>> SecuritySchemes { get; set; }

        /// <summary>
        /// An object to hold reusable Link Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<LinkObject>> Links { get; set; }

        /// <summary>
        /// An object to hold reusable Callback Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<Json.ImmutableJson>> Callbacks { get; set; }
    }

    public sealed class PathItemObject
    {
        /// <summary>
        /// An optional, string summary, intended to apply to all operations in this path.
        /// </summary>
        public string Summary { get; set; }

        /// <summary>
        /// An optional, string description, intended to apply to all operations in this path.
        /// CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// A definition of a GET operation on this path.
        /// </summary>
        public OperationObject Get { get; set; }

        /// <summary>
        /// A definition of a PUT operation on this path.
        /// </summary>
        public OperationObject Put { get; set; }

        /// <summary>
        /// A definition of a POST operation on this path.
        /// </summary>
        public OperationObject Post { get; set; }

        /// <summary>
        /// A definition of a DELETE operation on this path.
        /// </summary>
        public OperationObject Delete { get; set; }

        /// <summary>
        /// A definition of a OPTIONS operation on this path.
        /// </summary>
        public OperationObject Options { get; set; }

        /// <summary>
        /// A definition of a HEAD operation on this path.
        /// </summary>
        public OperationObject Head { get; set; }

        /// <summary>
        /// A definition of a PATCH operation on this path.
        /// </summary>
        public OperationObject Patch { get; set; }

        /// <summary>
        /// A definition of a TRACE operation on this path.
        /// </summary>
        public OperationObject Trace { get; set; }

        /// <summary>
        /// An alternative server array to service all operations in this path.
        /// </summary>
        public List<ServerObject> Servers { get; set; }

        /// <summary>
        /// A list of parameters that are applicable for all the operations described under this path.
        /// These parameters can be overridden at the operation level, but cannot be removed there.
        /// The list MUST NOT include duplicated parameters.
        /// A unique parameter is defined by a combination of a name and location.
        /// The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.
        /// </summary>
        public List<MaybeRef<ParameterObject>> Parameters { get; set; }
    }

    public sealed class OperationObject
    {
        public List<string> Tags { get; set; }

        public string Summary { get; set; }

        public string Description { get; set; }

        public Json.ImmutableJson ExternalDocs { get; set; }

        public string OperationId { get; set; }

        public List<MaybeRef<ParameterObject>> Parameters { get; set; }

        public MaybeRef<RequestBodyObject> RequestBody { get; set; }

        public Dictionary<string, MaybeRef<ResponseObject>> Responses { get; set; }

        public Dictionary<string, MaybeRef<Json.ImmutableJson>> Callbacks { get; set; }

        public bool Deprecated { get; set; } = false;

        public List<Json.ImmutableJson> Security { get; set; }

        public List<ServerObject> Servers { get; set; }
    }

    public sealed class OpenApiObject
    {
        /// <summary>
        /// This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document uses.
        /// The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document.
        /// This is not related to the API info.version string.
        /// </summary>
        public string Openapi { get; set; }

        /// <summary>
        /// Provides metadata about the API. The metadata MAY be used by tooling as required.
        /// </summary>
        public InfoObject Info { get; set; }

        /// <summary>
        /// An array of Server Objects, which provide connectivity information to a target server.
        /// If the servers property is not provided, or is an empty array,
        /// the default value would be a Server Object with a url value of /.
        /// </summary>
        public List<ServerObject> Servers { get; set; }

        /// <summary>
        /// The available paths and operations for the API.
        /// </summary>
        public Dictionary<string, PathItemObject> Paths { get; set; }

        /// <summary>
        /// An element to hold various schemas for the specification.
        /// </summary>
        public ComponentsObject Components { get; set; }

        /// <summary>
        /// A declaration of which security mechanisms can be used across the API.
        /// The list of values includes alternative security requirement objects that can be used.
        /// Only one of the security requirement objects need to be satisfied to authorize a request.
        /// Individual operations can override this definition.
        /// </summary>
        public List<Json.ImmutableJson> Security { get; set; }

        /// <summary>
        /// A list of tags used by the specification with additional metadata.
        /// The order of the tags can be used to reflect on their order by the parsing tools.
        /// Not all tags that are used by the Operation Object must be declared.
        /// The tags that are not declared MAY be organized randomly or based on the tools' logic.
        /// Each tag name in the list MUST be unique.
        /// </summary>
        public List<Json.ImmutableJson> Tags { get; set; }

        /// <summary>
        /// Additional external documentation.
        /// </summary>
        public List<Json.ImmutableJson> ExternalDocs { get; set; }
    }

    public sealed class ResponseObject
    {
        /// <summary>
        /// A short description of the response. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Maps a header name to its definition. RFC7230 states header names are case insensitive.
        /// If a response header is defined with the name "Content-Type", it SHALL be ignored.
        /// </summary>
        public Dictionary<string, MaybeRef<HeaderObject>> Headers { get; set; }

        /// <summary>
        /// A map containing descriptions of potential response payloads.
        /// The key is a media type or media type range and the value describes it.
        /// For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
        /// </summary>
        public Dictionary<string, MediaTypeObject> Content { get; set; }

        /// <summary>
        /// A map of operations links that can be followed from the response.
        /// The key of the map is a short name for the link,
        /// following the naming constraints of the names for Component Objects.
        /// </summary>
        public Dictionary<string, MaybeRef<LinkObject>> Links { get; set; }
    }

    public sealed class ParameterObject
    {
        /// <summary>
        /// The name of the parameter. Parameter names are case sensitive.
        /// If in is "path", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for
        /// further information.
        /// If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored.
        /// For all other cases, the name corresponds to the parameter name used by the in property.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The location of the parameter. Possible values are "query", "header", "path" or "cookie".
        /// </summary>
        public ParameterLocation In { get; set; }

        /// <summary>
        /// A brief description of the parameter. This could contain examples of use.
        /// CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Determines whether this parameter is mandatory.
        /// If the parameter location is "path", this property is REQUIRED and its value MUST be true.
        /// Otherwise, the property MAY be included and its default value is false.
        /// </summary>
        public bool Required { get; set; } = false;

        /// <summary>
        /// Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.
        /// </summary>
        public bool Deprecated { get; set; } = false;

        /// <summary>
        /// Sets the ability to pass empty-valued parameters.
        /// This is valid only for query parameters and allows sending a parameter with an empty value.
        /// If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored.
        /// Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.
        /// </summary>
        public bool AllowEmptyValue { get; set; } = false;

        public ParameterStyle? Style { get; set; }

        public bool Explode { get; set; } = false;

        public bool AllowReserved { get; set; } = false;

        public MaybeRef<SchemaObject> Schema { get; set; }

        public Json.ImmutableJson Example { get; set; }

        public Dictionary<string, MaybeRef<ExampleObject>> Examples { get; set; }

        public Dictionary<string, MediaTypeObject> Content { get; set; }
    }

    public sealed class HeaderObject
    {
        /// <summary>
        /// A brief description of the parameter. This could contain examples of use.
        /// CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Determines whether this parameter is mandatory.
        /// </summary>
        public bool Required { get; set; } = false;

        /// <summary>
        /// Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.
        /// </summary>
        public bool Deprecated { get; set; } = false;

        /// <summary>
        /// Sets the ability to pass empty-valued parameters.
        /// This is valid only for query parameters and allows sending a parameter with an empty value.
        /// If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored.
        /// Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.
        /// </summary>
        public bool AllowEmptyValue { get; set; } = false;

        public ParameterStyle? Style { get; set; }

        public bool Explode { get; set; } = false;

        public bool AllowReserved { get; set; } = false;

        public MaybeRef<SchemaObject> Schema { get; set; }

        public Json.ImmutableJson Example { get; set; }

        public Dictionary<string, MaybeRef<ExampleObject>> Examples { get; set; }

        public Dictionary<string, MediaTypeObject> Content { get; set; }
    }

    public sealed class ExampleObject
    {
        /// <summary>
        /// Short description for the example.
        /// </summary>
        public string Summary { get; set; }

        /// <summary>
        /// Long description for the example. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Embedded literal example. The value field and externalValue field are mutually exclusive.
        /// To represent examples of media types that cannot naturally represented in JSON or YAML,
        /// use a string value to contain the example, escaping where necessary.
        /// </summary>
        public Json.ImmutableJson Value { get; set; }

        /// <summary>
        /// A URL that points to the literal example.
        /// This provides the capability to reference examples that cannot easily be included in JSON or YAML documents.
        /// The value field and externalValue field are mutually exclusive.
        /// </summary>
        public string ExternalValue { get; set; }
    }

    public sealed class RequestBodyObject
    {
        /// <summary>
        /// A brief description of the request body. This could contain examples of use.
        /// CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// The content of the request body. The key is a media type or media type range and the value describes it.
        /// For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
        /// </summary>
        public Dictionary<string, MediaTypeObject> Content { get; set; }

        /// <summary>
        /// Determines if the request body is required in the request.
        /// </summary>
        public bool Required { get; set; } = false;
    }

    public sealed class LinkObject
    {
        /// <summary>
        /// A relative or absolute URI reference to an OAS operation.
        /// This field is mutually exclusive of the operationId field, and MUST point to an Operation Object.
        /// Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition.
        /// </summary>
        public string OperationRef { get; set; }

        /// <summary>
        /// The name of an existing, resolvable OAS operation, as defined with a unique operationId.
        /// This field is mutually exclusive of the operationRef field.
        /// </summary>
        public string OperationId { get; set; }

        /// <summary>
        /// A map representing parameters to pass to an operation as specified with operationId or identified via operationRef.
        /// The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.
        /// The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g.
        /// path.id).
        /// </summary>
        public Dictionary<string, Json.ImmutableJson> Parameters { get; set; }

        /// <summary>
        /// A literal value or {expression} to use as a request body when calling the target operation.
        /// </summary>
        public Json.ImmutableJson RequestBody { get; set; }

        /// <summary>
        /// A description of the link. CommonMark syntax MAY be used for rich text representation.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// A server object to be used by the target operation.
        /// </summary>
        public ServerObject Server { get; set; }
    }

    public sealed class MediaTypeObject
    {
        /// <summary>
        /// The schema defining the content of the request, response, or parameter.
        /// </summary>
        public MaybeRef<SchemaObject> Schema { get; set; }

        /// <summary>
        /// Example of the media type. The example object SHOULD be in the correct format as specified by the media type.
        /// The example field is mutually exclusive of the examples field.
        /// Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.
        /// </summary>
        public Json.ImmutableJson Example { get; set; }

        /// <summary>
        /// Examples of the media type. Each example object SHOULD match the media type and specified schema if present.
        /// The examples field is mutually exclusive of the example field.
        /// Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.
        /// </summary>
        public Dictionary<string, MaybeRef<ExampleObject>> Examples { get; set; }

        /// <summary>
        /// A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property.
        /// The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.
        /// </summary>
        public Dictionary<string, EncodingObject> Encoding { get; set; }
    }

    public sealed class EncodingObject
    {
        public string ContentType { get; set; }

        public Dictionary<string, MaybeRef<HeaderObject>> Headers { get; set; }

        public string Style { get; set; }

        public bool? Explode { get; set; }

        public bool AllowReserved { get; set; } = false;
    }

    public sealed class JsonSchemaTypeJsonSerializer : Json.Serialization.IJsonSerializer<JsonSchemaType>, Json.Serialization.IJsonKeySerializer<JsonSchemaType>
    {
        public static readonly JsonSchemaTypeJsonSerializer Instance = new JsonSchemaTypeJsonSerializer();

        public Json.ImmutableJson Serialize(JsonSchemaType value)
        {
            return SerializeKey(value);
        }

        public JsonSchemaType Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsString;
        }

        public string SerializeKey(JsonSchemaType value)
        {
            switch (value)
            {
                case JsonSchemaType.Null: return "null";
                case JsonSchemaType.Boolean: return "boolean";
                case JsonSchemaType.Object: return "object";
                case JsonSchemaType.Array: return "array";
                case JsonSchemaType.Number: return "number";
                case JsonSchemaType.Integer: return "integer";
                case JsonSchemaType.String: return "string";
                default: throw new System.ArgumentOutOfRangeException(nameof(value));
            }
        }

        public JsonSchemaType DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "null": return JsonSchemaType.Null;
                case "boolean": return JsonSchemaType.Boolean;
                case "object": return JsonSchemaType.Object;
                case "array": return JsonSchemaType.Array;
                case "number": return JsonSchemaType.Number;
                case "integer": return JsonSchemaType.Integer;
                case "string": return JsonSchemaType.String;
                default: throw new System.ArgumentOutOfRangeException(nameof(jsonKey));
            }
        }
    }

    public sealed class SchemaObjectJsonSerializer : Json.Serialization.IJsonSerializer<SchemaObject>
    {
        public static readonly SchemaObjectJsonSerializer Instance = new SchemaObjectJsonSerializer();

        public Json.ImmutableJson Serialize(SchemaObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Title != null)
                json["title"] = JsonSerializer.String.Serialize(value.Title);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Default != null)
                json["default"] = JsonSerializer.Json.Serialize(value.Default);
            if (value.Type.HasValue)
                json["type"] = JsonSchemaTypeJsonSerializer.Instance.Serialize(value.Type.Value);
            if (value.Items != null)
                json["items"] = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Serialize(value.Items);
            if (value.Properties != null)
                json["properties"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Serialize(value.Properties);
            if (value.Required != null)
                json["required"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Required);
            if (value.AllOf != null)
                json["allOf"] = JsonSerializer.List(MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Serialize(value.AllOf);
            if (value.Nullable.HasValue)
                json["nullable"] = JsonSerializer.Bool.Serialize(value.Nullable.Value);
            return json;
        }

        public SchemaObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new SchemaObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, SchemaObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("title", out var jsonTitle) && !jsonTitle.IsNull)
                value.Title = JsonSerializer.String.Deserialize(jsonTitle);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("default", out var jsonDefault) && !jsonDefault.IsNull)
                value.Default = JsonSerializer.Json.Deserialize(jsonDefault);
            if (json.AsObject.TryGetValue("type", out var jsonType) && !jsonType.IsNull)
                value.Type = JsonSchemaTypeJsonSerializer.Instance.Deserialize(jsonType);
            if (json.AsObject.TryGetValue("items", out var jsonItems) && !jsonItems.IsNull)
                value.Items = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Deserialize(jsonItems);
            if (json.AsObject.TryGetValue("properties", out var jsonProperties) && !jsonProperties.IsNull)
                value.Properties = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Deserialize(jsonProperties);
            if (json.AsObject.TryGetValue("required", out var jsonRequired) && !jsonRequired.IsNull)
                value.Required = JsonSerializer.List(JsonSerializer.String).Deserialize(jsonRequired);
            if (json.AsObject.TryGetValue("allOf", out var jsonAllOf) && !jsonAllOf.IsNull)
                value.AllOf = JsonSerializer.List(MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Deserialize(jsonAllOf);
            if (json.AsObject.TryGetValue("nullable", out var jsonNullable) && !jsonNullable.IsNull)
                value.Nullable = JsonSerializer.Bool.Deserialize(jsonNullable);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ContactObjectJsonSerializer : Json.Serialization.IJsonSerializer<ContactObject>
    {
        public static readonly ContactObjectJsonSerializer Instance = new ContactObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ContactObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Name != null)
                json["name"] = JsonSerializer.String.Serialize(value.Name);
            if (value.Url != null)
                json["url"] = JsonSerializer.String.Serialize(value.Url);
            if (value.Email != null)
                json["email"] = JsonSerializer.String.Serialize(value.Email);
            return json;
        }

        public ContactObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ContactObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ContactObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("name", out var jsonName) && !jsonName.IsNull)
                value.Name = JsonSerializer.String.Deserialize(jsonName);
            if (json.AsObject.TryGetValue("url", out var jsonUrl) && !jsonUrl.IsNull)
                value.Url = JsonSerializer.String.Deserialize(jsonUrl);
            if (json.AsObject.TryGetValue("email", out var jsonEmail) && !jsonEmail.IsNull)
                value.Email = JsonSerializer.String.Deserialize(jsonEmail);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class LicenseObjectJsonSerializer : Json.Serialization.IJsonSerializer<LicenseObject>
    {
        public static readonly LicenseObjectJsonSerializer Instance = new LicenseObjectJsonSerializer();

        public Json.ImmutableJson Serialize(LicenseObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Name == null)
                throw new System.ArgumentException("Required property Name is null", nameof(value));

            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            if (value.Url != null)
                json["url"] = JsonSerializer.String.Serialize(value.Url);
            return json;
        }

        public LicenseObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new LicenseObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, LicenseObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
            if (json.AsObject.TryGetValue("url", out var jsonUrl) && !jsonUrl.IsNull)
                value.Url = JsonSerializer.String.Deserialize(jsonUrl);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class InfoObjectJsonSerializer : Json.Serialization.IJsonSerializer<InfoObject>
    {
        public static readonly InfoObjectJsonSerializer Instance = new InfoObjectJsonSerializer();

        public Json.ImmutableJson Serialize(InfoObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Title == null)
                throw new System.ArgumentException("Required property Title is null", nameof(value));

            if (value.Version == null)
                throw new System.ArgumentException("Required property Version is null", nameof(value));
            var json = new Json.JsonObject();
            json["title"] = JsonSerializer.String.Serialize(value.Title);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.TermsOfService != null)
                json["termsOfService"] = JsonSerializer.String.Serialize(value.TermsOfService);
            if (value.Contact != null)
                json["contact"] = ContactObjectJsonSerializer.Instance.Serialize(value.Contact);
            if (value.License != null)
                json["license"] = LicenseObjectJsonSerializer.Instance.Serialize(value.License);
            json["version"] = JsonSerializer.String.Serialize(value.Version);
            return json;
        }

        public InfoObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new InfoObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, InfoObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Title = JsonSerializer.String.Deserialize(json["title"]);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("termsOfService", out var jsonTermsOfService) && !jsonTermsOfService.IsNull)
                value.TermsOfService = JsonSerializer.String.Deserialize(jsonTermsOfService);
            if (json.AsObject.TryGetValue("contact", out var jsonContact) && !jsonContact.IsNull)
                value.Contact = ContactObjectJsonSerializer.Instance.Deserialize(jsonContact);
            if (json.AsObject.TryGetValue("license", out var jsonLicense) && !jsonLicense.IsNull)
                value.License = LicenseObjectJsonSerializer.Instance.Deserialize(jsonLicense);
            value.Version = JsonSerializer.String.Deserialize(json["version"]);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ServerVariableObjectJsonSerializer : Json.Serialization.IJsonSerializer<ServerVariableObject>
    {
        public static readonly ServerVariableObjectJsonSerializer Instance = new ServerVariableObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ServerVariableObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Default == null)
                throw new System.ArgumentException("Required property Default is null", nameof(value));

            var json = new Json.JsonObject();
            if (value.Enum != null)
                json["enum"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Enum);
            json["default"] = JsonSerializer.String.Serialize(value.Default);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            return json;
        }

        public ServerVariableObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ServerVariableObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ServerVariableObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("enum", out var jsonEnum) && !jsonEnum.IsNull)
                value.Enum = JsonSerializer.List(JsonSerializer.String).Deserialize(jsonEnum);
            value.Default = JsonSerializer.String.Deserialize(json["default"]);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ServerObjectJsonSerializer : Json.Serialization.IJsonSerializer<ServerObject>
    {
        public static readonly ServerObjectJsonSerializer Instance = new ServerObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ServerObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Url == null)
                throw new System.ArgumentException("Required property Url is null", nameof(value));

            var json = new Json.JsonObject();
            json["url"] = JsonSerializer.String.Serialize(value.Url);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Variables != null)
                json["variables"] = JsonSerializer.Dict(JsonSerializer.String, ServerVariableObjectJsonSerializer.Instance).Serialize(value.Variables);
            return json;
        }

        public ServerObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ServerObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ServerObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Url = JsonSerializer.String.Deserialize(json["url"]);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("variables", out var jsonVariables) && !jsonVariables.IsNull)
                value.Variables = JsonSerializer.Dict(JsonSerializer.String, ServerVariableObjectJsonSerializer.Instance).Deserialize(jsonVariables);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ComponentsObjectJsonSerializer : Json.Serialization.IJsonSerializer<ComponentsObject>
    {
        public static readonly ComponentsObjectJsonSerializer Instance = new ComponentsObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ComponentsObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Schemas != null)
                json["schemas"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Serialize(value.Schemas);
            if (value.Responses != null)
                json["responses"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ResponseObject>(ResponseObjectJsonSerializer.Instance)).Serialize(value.Responses);
            if (value.Parameters != null)
                json["parameters"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Serialize(value.Parameters);
            if (value.Examples != null)
                json["examples"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Serialize(value.Examples);
            if (value.RequestBodies != null)
                json["requestBodies"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<RequestBodyObject>(RequestBodyObjectJsonSerializer.Instance)).Serialize(value.RequestBodies);
            if (value.Headers != null)
                json["headers"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Serialize(value.Headers);
            if (value.SecuritySchemes != null)
                json["securitySchemes"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Serialize(value.SecuritySchemes);
            if (value.Links != null)
                json["links"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<LinkObject>(LinkObjectJsonSerializer.Instance)).Serialize(value.Links);
            if (value.Callbacks != null)
                json["callbacks"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Serialize(value.Callbacks);
            return json;
        }

        public ComponentsObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ComponentsObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ComponentsObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("schemas", out var jsonSchemas) && !jsonSchemas.IsNull)
                value.Schemas = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance)).Deserialize(jsonSchemas);
            if (json.AsObject.TryGetValue("responses", out var jsonResponses) && !jsonResponses.IsNull)
                value.Responses = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ResponseObject>(ResponseObjectJsonSerializer.Instance)).Deserialize(jsonResponses);
            if (json.AsObject.TryGetValue("parameters", out var jsonParameters) && !jsonParameters.IsNull)
                value.Parameters = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Deserialize(jsonParameters);
            if (json.AsObject.TryGetValue("examples", out var jsonExamples) && !jsonExamples.IsNull)
                value.Examples = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Deserialize(jsonExamples);
            if (json.AsObject.TryGetValue("requestBodies", out var jsonRequestBodies) && !jsonRequestBodies.IsNull)
                value.RequestBodies = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<RequestBodyObject>(RequestBodyObjectJsonSerializer.Instance)).Deserialize(jsonRequestBodies);
            if (json.AsObject.TryGetValue("headers", out var jsonHeaders) && !jsonHeaders.IsNull)
                value.Headers = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Deserialize(jsonHeaders);
            if (json.AsObject.TryGetValue("securitySchemes", out var jsonSecuritySchemes) && !jsonSecuritySchemes.IsNull)
                value.SecuritySchemes = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Deserialize(jsonSecuritySchemes);
            if (json.AsObject.TryGetValue("links", out var jsonLinks) && !jsonLinks.IsNull)
                value.Links = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<LinkObject>(LinkObjectJsonSerializer.Instance)).Deserialize(jsonLinks);
            if (json.AsObject.TryGetValue("callbacks", out var jsonCallbacks) && !jsonCallbacks.IsNull)
                value.Callbacks = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Deserialize(jsonCallbacks);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class PathItemObjectJsonSerializer : Json.Serialization.IJsonSerializer<PathItemObject>
    {
        public static readonly PathItemObjectJsonSerializer Instance = new PathItemObjectJsonSerializer();

        public Json.ImmutableJson Serialize(PathItemObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Summary != null)
                json["summary"] = JsonSerializer.String.Serialize(value.Summary);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Get != null)
                json["get"] = OperationObjectJsonSerializer.Instance.Serialize(value.Get);
            if (value.Put != null)
                json["put"] = OperationObjectJsonSerializer.Instance.Serialize(value.Put);
            if (value.Post != null)
                json["post"] = OperationObjectJsonSerializer.Instance.Serialize(value.Post);
            if (value.Delete != null)
                json["delete"] = OperationObjectJsonSerializer.Instance.Serialize(value.Delete);
            if (value.Options != null)
                json["options"] = OperationObjectJsonSerializer.Instance.Serialize(value.Options);
            if (value.Head != null)
                json["head"] = OperationObjectJsonSerializer.Instance.Serialize(value.Head);
            if (value.Patch != null)
                json["patch"] = OperationObjectJsonSerializer.Instance.Serialize(value.Patch);
            if (value.Trace != null)
                json["trace"] = OperationObjectJsonSerializer.Instance.Serialize(value.Trace);
            if (value.Servers != null)
                json["servers"] = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Serialize(value.Servers);
            if (value.Parameters != null)
                json["parameters"] = JsonSerializer.List(MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Serialize(value.Parameters);
            return json;
        }

        public PathItemObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new PathItemObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, PathItemObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("summary", out var jsonSummary) && !jsonSummary.IsNull)
                value.Summary = JsonSerializer.String.Deserialize(jsonSummary);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("get", out var jsonGet) && !jsonGet.IsNull)
                value.Get = OperationObjectJsonSerializer.Instance.Deserialize(jsonGet);
            if (json.AsObject.TryGetValue("put", out var jsonPut) && !jsonPut.IsNull)
                value.Put = OperationObjectJsonSerializer.Instance.Deserialize(jsonPut);
            if (json.AsObject.TryGetValue("post", out var jsonPost) && !jsonPost.IsNull)
                value.Post = OperationObjectJsonSerializer.Instance.Deserialize(jsonPost);
            if (json.AsObject.TryGetValue("delete", out var jsonDelete) && !jsonDelete.IsNull)
                value.Delete = OperationObjectJsonSerializer.Instance.Deserialize(jsonDelete);
            if (json.AsObject.TryGetValue("options", out var jsonOptions) && !jsonOptions.IsNull)
                value.Options = OperationObjectJsonSerializer.Instance.Deserialize(jsonOptions);
            if (json.AsObject.TryGetValue("head", out var jsonHead) && !jsonHead.IsNull)
                value.Head = OperationObjectJsonSerializer.Instance.Deserialize(jsonHead);
            if (json.AsObject.TryGetValue("patch", out var jsonPatch) && !jsonPatch.IsNull)
                value.Patch = OperationObjectJsonSerializer.Instance.Deserialize(jsonPatch);
            if (json.AsObject.TryGetValue("trace", out var jsonTrace) && !jsonTrace.IsNull)
                value.Trace = OperationObjectJsonSerializer.Instance.Deserialize(jsonTrace);
            if (json.AsObject.TryGetValue("servers", out var jsonServers) && !jsonServers.IsNull)
                value.Servers = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Deserialize(jsonServers);
            if (json.AsObject.TryGetValue("parameters", out var jsonParameters) && !jsonParameters.IsNull)
                value.Parameters = JsonSerializer.List(MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Deserialize(jsonParameters);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class OperationObjectJsonSerializer : Json.Serialization.IJsonSerializer<OperationObject>
    {
        public static readonly OperationObjectJsonSerializer Instance = new OperationObjectJsonSerializer();

        public Json.ImmutableJson Serialize(OperationObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Tags != null)
                json["tags"] = JsonSerializer.List(JsonSerializer.String).Serialize(value.Tags);
            if (value.Summary != null)
                json["summary"] = JsonSerializer.String.Serialize(value.Summary);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.ExternalDocs != null)
                json["externalDocs"] = JsonSerializer.Json.Serialize(value.ExternalDocs);
            if (value.OperationId != null)
                json["operationId"] = JsonSerializer.String.Serialize(value.OperationId);
            if (value.Parameters != null)
                json["parameters"] = JsonSerializer.List(MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Serialize(value.Parameters);
            if (value.RequestBody != null)
                json["requestBody"] = MaybeRefSerializer.Create<RequestBodyObject>(RequestBodyObjectJsonSerializer.Instance).Serialize(value.RequestBody);
            if (value.Responses != null)
                json["responses"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ResponseObject>(ResponseObjectJsonSerializer.Instance)).Serialize(value.Responses);
            if (value.Callbacks != null)
                json["callbacks"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Serialize(value.Callbacks);
            json["deprecated"] = JsonSerializer.Bool.Serialize(value.Deprecated);
            if (value.Security != null)
                json["security"] = JsonSerializer.List(JsonSerializer.Json).Serialize(value.Security);
            if (value.Servers != null)
                json["servers"] = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Serialize(value.Servers);
            return json;
        }

        public OperationObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new OperationObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, OperationObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("tags", out var jsonTags) && !jsonTags.IsNull)
                value.Tags = JsonSerializer.List(JsonSerializer.String).Deserialize(jsonTags);
            if (json.AsObject.TryGetValue("summary", out var jsonSummary) && !jsonSummary.IsNull)
                value.Summary = JsonSerializer.String.Deserialize(jsonSummary);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("externalDocs", out var jsonExternalDocs) && !jsonExternalDocs.IsNull)
                value.ExternalDocs = JsonSerializer.Json.Deserialize(jsonExternalDocs);
            if (json.AsObject.TryGetValue("operationId", out var jsonOperationId) && !jsonOperationId.IsNull)
                value.OperationId = JsonSerializer.String.Deserialize(jsonOperationId);
            if (json.AsObject.TryGetValue("parameters", out var jsonParameters) && !jsonParameters.IsNull)
                value.Parameters = JsonSerializer.List(MaybeRefSerializer.Create<ParameterObject>(ParameterObjectJsonSerializer.Instance)).Deserialize(jsonParameters);
            if (json.AsObject.TryGetValue("requestBody", out var jsonRequestBody) && !jsonRequestBody.IsNull)
                value.RequestBody = MaybeRefSerializer.Create<RequestBodyObject>(RequestBodyObjectJsonSerializer.Instance).Deserialize(jsonRequestBody);
            if (json.AsObject.TryGetValue("responses", out var jsonResponses) && !jsonResponses.IsNull)
                value.Responses = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ResponseObject>(ResponseObjectJsonSerializer.Instance)).Deserialize(jsonResponses);
            if (json.AsObject.TryGetValue("callbacks", out var jsonCallbacks) && !jsonCallbacks.IsNull)
                value.Callbacks = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<Json.ImmutableJson>(JsonSerializer.Json)).Deserialize(jsonCallbacks);
            if (json.AsObject.TryGetValue("deprecated", out var jsonDeprecated) && !jsonDeprecated.IsNull)
                value.Deprecated = JsonSerializer.Bool.Deserialize(jsonDeprecated);
            if (json.AsObject.TryGetValue("security", out var jsonSecurity) && !jsonSecurity.IsNull)
                value.Security = JsonSerializer.List(JsonSerializer.Json).Deserialize(jsonSecurity);
            if (json.AsObject.TryGetValue("servers", out var jsonServers) && !jsonServers.IsNull)
                value.Servers = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Deserialize(jsonServers);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class OpenApiObjectJsonSerializer : Json.Serialization.IJsonSerializer<OpenApiObject>
    {
        public static readonly OpenApiObjectJsonSerializer Instance = new OpenApiObjectJsonSerializer();

        public Json.ImmutableJson Serialize(OpenApiObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Openapi == null)
                throw new System.ArgumentException("Required property Openapi is null", nameof(value));
            if (value.Info == null)
                throw new System.ArgumentException("Required property Info is null", nameof(value));

            if (value.Paths == null)
                throw new System.ArgumentException("Required property Paths is null", nameof(value));

            var json = new Json.JsonObject();
            json["openapi"] = JsonSerializer.String.Serialize(value.Openapi);
            json["info"] = InfoObjectJsonSerializer.Instance.Serialize(value.Info);
            if (value.Servers != null)
                json["servers"] = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Serialize(value.Servers);
            json["paths"] = JsonSerializer.Dict(JsonSerializer.String, PathItemObjectJsonSerializer.Instance).Serialize(value.Paths);
            if (value.Components != null)
                json["components"] = ComponentsObjectJsonSerializer.Instance.Serialize(value.Components);
            if (value.Security != null)
                json["security"] = JsonSerializer.List(JsonSerializer.Json).Serialize(value.Security);
            if (value.Tags != null)
                json["tags"] = JsonSerializer.List(JsonSerializer.Json).Serialize(value.Tags);
            if (value.ExternalDocs != null)
                json["externalDocs"] = JsonSerializer.List(JsonSerializer.Json).Serialize(value.ExternalDocs);
            return json;
        }

        public OpenApiObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new OpenApiObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, OpenApiObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Openapi = JsonSerializer.String.Deserialize(json["openapi"]);
            value.Info = InfoObjectJsonSerializer.Instance.Deserialize(json["info"]);
            if (json.AsObject.TryGetValue("servers", out var jsonServers) && !jsonServers.IsNull)
                value.Servers = JsonSerializer.List(ServerObjectJsonSerializer.Instance).Deserialize(jsonServers);
            value.Paths = JsonSerializer.Dict(JsonSerializer.String, PathItemObjectJsonSerializer.Instance).Deserialize(json["paths"]);
            if (json.AsObject.TryGetValue("components", out var jsonComponents) && !jsonComponents.IsNull)
                value.Components = ComponentsObjectJsonSerializer.Instance.Deserialize(jsonComponents);
            if (json.AsObject.TryGetValue("security", out var jsonSecurity) && !jsonSecurity.IsNull)
                value.Security = JsonSerializer.List(JsonSerializer.Json).Deserialize(jsonSecurity);
            if (json.AsObject.TryGetValue("tags", out var jsonTags) && !jsonTags.IsNull)
                value.Tags = JsonSerializer.List(JsonSerializer.Json).Deserialize(jsonTags);
            if (json.AsObject.TryGetValue("externalDocs", out var jsonExternalDocs) && !jsonExternalDocs.IsNull)
                value.ExternalDocs = JsonSerializer.List(JsonSerializer.Json).Deserialize(jsonExternalDocs);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ResponseObjectJsonSerializer : Json.Serialization.IJsonSerializer<ResponseObject>
    {
        public static readonly ResponseObjectJsonSerializer Instance = new ResponseObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ResponseObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Description == null)
                throw new System.ArgumentException("Required property Description is null", nameof(value));

            var json = new Json.JsonObject();
            json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Headers != null)
                json["headers"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Serialize(value.Headers);
            if (value.Content != null)
                json["content"] = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Serialize(value.Content);
            if (value.Links != null)
                json["links"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<LinkObject>(LinkObjectJsonSerializer.Instance)).Serialize(value.Links);
            return json;
        }

        public ResponseObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ResponseObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ResponseObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Description = JsonSerializer.String.Deserialize(json["description"]);
            if (json.AsObject.TryGetValue("headers", out var jsonHeaders) && !jsonHeaders.IsNull)
                value.Headers = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Deserialize(jsonHeaders);
            if (json.AsObject.TryGetValue("content", out var jsonContent) && !jsonContent.IsNull)
                value.Content = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Deserialize(jsonContent);
            if (json.AsObject.TryGetValue("links", out var jsonLinks) && !jsonLinks.IsNull)
                value.Links = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<LinkObject>(LinkObjectJsonSerializer.Instance)).Deserialize(jsonLinks);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ParameterLocationJsonSerializer : Json.Serialization.IJsonSerializer<ParameterLocation>, Json.Serialization.IJsonKeySerializer<ParameterLocation>
    {
        public static readonly ParameterLocationJsonSerializer Instance = new ParameterLocationJsonSerializer();

        public Json.ImmutableJson Serialize(ParameterLocation value)
        {
            return SerializeKey(value);
        }

        public ParameterLocation Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsString;
        }

        public string SerializeKey(ParameterLocation value)
        {
            switch (value)
            {
                case ParameterLocation.Path: return "path";
                case ParameterLocation.Query: return "query";
                case ParameterLocation.Header: return "header";
                case ParameterLocation.Cookie: return "cookie";
                default: throw new System.ArgumentOutOfRangeException(nameof(value));
            }
        }

        public ParameterLocation DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "path": return ParameterLocation.Path;
                case "query": return ParameterLocation.Query;
                case "header": return ParameterLocation.Header;
                case "cookie": return ParameterLocation.Cookie;
                default: throw new System.ArgumentOutOfRangeException(nameof(jsonKey));
            }
        }
    }

    public sealed class ParameterStyleJsonSerializer : Json.Serialization.IJsonSerializer<ParameterStyle>, Json.Serialization.IJsonKeySerializer<ParameterStyle>
    {
        public static readonly ParameterStyleJsonSerializer Instance = new ParameterStyleJsonSerializer();

        public Json.ImmutableJson Serialize(ParameterStyle value)
        {
            return SerializeKey(value);
        }

        public ParameterStyle Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return DeserializeKey(json.AsString);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsString;
        }

        public string SerializeKey(ParameterStyle value)
        {
            switch (value)
            {
                case ParameterStyle.Matrix: return "matrix";
                case ParameterStyle.Label: return "label";
                case ParameterStyle.Form: return "form";
                case ParameterStyle.Simple: return "simple";
                case ParameterStyle.SpaceDelimited: return "spaceDelimited";
                case ParameterStyle.PipeDelimited: return "pipeDelimited";
                case ParameterStyle.DeepObject: return "deepObject";
                default: throw new System.ArgumentOutOfRangeException(nameof(value));
            }
        }

        public ParameterStyle DeserializeKey(string jsonKey)
        {
            switch (jsonKey)
            {
                case "matrix": return ParameterStyle.Matrix;
                case "label": return ParameterStyle.Label;
                case "form": return ParameterStyle.Form;
                case "simple": return ParameterStyle.Simple;
                case "spaceDelimited": return ParameterStyle.SpaceDelimited;
                case "pipeDelimited": return ParameterStyle.PipeDelimited;
                case "deepObject": return ParameterStyle.DeepObject;
                default: throw new System.ArgumentOutOfRangeException(nameof(jsonKey));
            }
        }
    }

    public sealed class ParameterObjectJsonSerializer : Json.Serialization.IJsonSerializer<ParameterObject>
    {
        public static readonly ParameterObjectJsonSerializer Instance = new ParameterObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ParameterObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Name == null)
                throw new System.ArgumentException("Required property Name is null", nameof(value));

            var json = new Json.JsonObject();
            json["name"] = JsonSerializer.String.Serialize(value.Name);
            json["in"] = ParameterLocationJsonSerializer.Instance.Serialize(value.In);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["required"] = JsonSerializer.Bool.Serialize(value.Required);
            json["deprecated"] = JsonSerializer.Bool.Serialize(value.Deprecated);
            json["allowEmptyValue"] = JsonSerializer.Bool.Serialize(value.AllowEmptyValue);
            if (value.Style.HasValue)
                json["style"] = ParameterStyleJsonSerializer.Instance.Serialize(value.Style.Value);
            json["explode"] = JsonSerializer.Bool.Serialize(value.Explode);
            json["allowReserved"] = JsonSerializer.Bool.Serialize(value.AllowReserved);
            if (value.Schema != null)
                json["schema"] = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Serialize(value.Schema);
            if (value.Example != null)
                json["example"] = JsonSerializer.Json.Serialize(value.Example);
            if (value.Examples != null)
                json["examples"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Serialize(value.Examples);
            if (value.Content != null)
                json["content"] = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Serialize(value.Content);
            return json;
        }

        public ParameterObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ParameterObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ParameterObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Name = JsonSerializer.String.Deserialize(json["name"]);
            value.In = ParameterLocationJsonSerializer.Instance.Deserialize(json["in"]);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("required", out var jsonRequired) && !jsonRequired.IsNull)
                value.Required = JsonSerializer.Bool.Deserialize(jsonRequired);
            if (json.AsObject.TryGetValue("deprecated", out var jsonDeprecated) && !jsonDeprecated.IsNull)
                value.Deprecated = JsonSerializer.Bool.Deserialize(jsonDeprecated);
            if (json.AsObject.TryGetValue("allowEmptyValue", out var jsonAllowEmptyValue) && !jsonAllowEmptyValue.IsNull)
                value.AllowEmptyValue = JsonSerializer.Bool.Deserialize(jsonAllowEmptyValue);
            if (json.AsObject.TryGetValue("style", out var jsonStyle) && !jsonStyle.IsNull)
                value.Style = ParameterStyleJsonSerializer.Instance.Deserialize(jsonStyle);
            if (json.AsObject.TryGetValue("explode", out var jsonExplode) && !jsonExplode.IsNull)
                value.Explode = JsonSerializer.Bool.Deserialize(jsonExplode);
            if (json.AsObject.TryGetValue("allowReserved", out var jsonAllowReserved) && !jsonAllowReserved.IsNull)
                value.AllowReserved = JsonSerializer.Bool.Deserialize(jsonAllowReserved);
            if (json.AsObject.TryGetValue("schema", out var jsonSchema) && !jsonSchema.IsNull)
                value.Schema = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Deserialize(jsonSchema);
            if (json.AsObject.TryGetValue("example", out var jsonExample) && !jsonExample.IsNull)
                value.Example = JsonSerializer.Json.Deserialize(jsonExample);
            if (json.AsObject.TryGetValue("examples", out var jsonExamples) && !jsonExamples.IsNull)
                value.Examples = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Deserialize(jsonExamples);
            if (json.AsObject.TryGetValue("content", out var jsonContent) && !jsonContent.IsNull)
                value.Content = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Deserialize(jsonContent);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class HeaderObjectJsonSerializer : Json.Serialization.IJsonSerializer<HeaderObject>
    {
        public static readonly HeaderObjectJsonSerializer Instance = new HeaderObjectJsonSerializer();

        public Json.ImmutableJson Serialize(HeaderObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["required"] = JsonSerializer.Bool.Serialize(value.Required);
            json["deprecated"] = JsonSerializer.Bool.Serialize(value.Deprecated);
            json["allowEmptyValue"] = JsonSerializer.Bool.Serialize(value.AllowEmptyValue);
            if (value.Style.HasValue)
                json["style"] = ParameterStyleJsonSerializer.Instance.Serialize(value.Style.Value);
            json["explode"] = JsonSerializer.Bool.Serialize(value.Explode);
            json["allowReserved"] = JsonSerializer.Bool.Serialize(value.AllowReserved);
            if (value.Schema != null)
                json["schema"] = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Serialize(value.Schema);
            if (value.Example != null)
                json["example"] = JsonSerializer.Json.Serialize(value.Example);
            if (value.Examples != null)
                json["examples"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Serialize(value.Examples);
            if (value.Content != null)
                json["content"] = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Serialize(value.Content);
            return json;
        }

        public HeaderObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new HeaderObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, HeaderObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("required", out var jsonRequired) && !jsonRequired.IsNull)
                value.Required = JsonSerializer.Bool.Deserialize(jsonRequired);
            if (json.AsObject.TryGetValue("deprecated", out var jsonDeprecated) && !jsonDeprecated.IsNull)
                value.Deprecated = JsonSerializer.Bool.Deserialize(jsonDeprecated);
            if (json.AsObject.TryGetValue("allowEmptyValue", out var jsonAllowEmptyValue) && !jsonAllowEmptyValue.IsNull)
                value.AllowEmptyValue = JsonSerializer.Bool.Deserialize(jsonAllowEmptyValue);
            if (json.AsObject.TryGetValue("style", out var jsonStyle) && !jsonStyle.IsNull)
                value.Style = ParameterStyleJsonSerializer.Instance.Deserialize(jsonStyle);
            if (json.AsObject.TryGetValue("explode", out var jsonExplode) && !jsonExplode.IsNull)
                value.Explode = JsonSerializer.Bool.Deserialize(jsonExplode);
            if (json.AsObject.TryGetValue("allowReserved", out var jsonAllowReserved) && !jsonAllowReserved.IsNull)
                value.AllowReserved = JsonSerializer.Bool.Deserialize(jsonAllowReserved);
            if (json.AsObject.TryGetValue("schema", out var jsonSchema) && !jsonSchema.IsNull)
                value.Schema = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Deserialize(jsonSchema);
            if (json.AsObject.TryGetValue("example", out var jsonExample) && !jsonExample.IsNull)
                value.Example = JsonSerializer.Json.Deserialize(jsonExample);
            if (json.AsObject.TryGetValue("examples", out var jsonExamples) && !jsonExamples.IsNull)
                value.Examples = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Deserialize(jsonExamples);
            if (json.AsObject.TryGetValue("content", out var jsonContent) && !jsonContent.IsNull)
                value.Content = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Deserialize(jsonContent);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class ExampleObjectJsonSerializer : Json.Serialization.IJsonSerializer<ExampleObject>
    {
        public static readonly ExampleObjectJsonSerializer Instance = new ExampleObjectJsonSerializer();

        public Json.ImmutableJson Serialize(ExampleObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.Summary != null)
                json["summary"] = JsonSerializer.String.Serialize(value.Summary);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Value != null)
                json["value"] = JsonSerializer.Json.Serialize(value.Value);
            if (value.ExternalValue != null)
                json["externalValue"] = JsonSerializer.String.Serialize(value.ExternalValue);
            return json;
        }

        public ExampleObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new ExampleObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, ExampleObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("summary", out var jsonSummary) && !jsonSummary.IsNull)
                value.Summary = JsonSerializer.String.Deserialize(jsonSummary);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("value", out var jsonValue) && !jsonValue.IsNull)
                value.Value = JsonSerializer.Json.Deserialize(jsonValue);
            if (json.AsObject.TryGetValue("externalValue", out var jsonExternalValue) && !jsonExternalValue.IsNull)
                value.ExternalValue = JsonSerializer.String.Deserialize(jsonExternalValue);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class RequestBodyObjectJsonSerializer : Json.Serialization.IJsonSerializer<RequestBodyObject>
    {
        public static readonly RequestBodyObjectJsonSerializer Instance = new RequestBodyObjectJsonSerializer();

        public Json.ImmutableJson Serialize(RequestBodyObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            if (value.Content == null)
                throw new System.ArgumentException("Required property Content is null", nameof(value));

            var json = new Json.JsonObject();
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            json["content"] = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Serialize(value.Content);
            json["required"] = JsonSerializer.Bool.Serialize(value.Required);
            return json;
        }

        public RequestBodyObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new RequestBodyObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, RequestBodyObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            value.Content = JsonSerializer.Dict(JsonSerializer.String, MediaTypeObjectJsonSerializer.Instance).Deserialize(json["content"]);
            if (json.AsObject.TryGetValue("required", out var jsonRequired) && !jsonRequired.IsNull)
                value.Required = JsonSerializer.Bool.Deserialize(jsonRequired);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class LinkObjectJsonSerializer : Json.Serialization.IJsonSerializer<LinkObject>
    {
        public static readonly LinkObjectJsonSerializer Instance = new LinkObjectJsonSerializer();

        public Json.ImmutableJson Serialize(LinkObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.OperationRef != null)
                json["operationRef"] = JsonSerializer.String.Serialize(value.OperationRef);
            if (value.OperationId != null)
                json["operationId"] = JsonSerializer.String.Serialize(value.OperationId);
            if (value.Parameters != null)
                json["parameters"] = JsonSerializer.Dict(JsonSerializer.String, JsonSerializer.Json).Serialize(value.Parameters);
            if (value.RequestBody != null)
                json["requestBody"] = JsonSerializer.Json.Serialize(value.RequestBody);
            if (value.Description != null)
                json["description"] = JsonSerializer.String.Serialize(value.Description);
            if (value.Server != null)
                json["server"] = ServerObjectJsonSerializer.Instance.Serialize(value.Server);
            return json;
        }

        public LinkObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new LinkObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, LinkObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("operationRef", out var jsonOperationRef) && !jsonOperationRef.IsNull)
                value.OperationRef = JsonSerializer.String.Deserialize(jsonOperationRef);
            if (json.AsObject.TryGetValue("operationId", out var jsonOperationId) && !jsonOperationId.IsNull)
                value.OperationId = JsonSerializer.String.Deserialize(jsonOperationId);
            if (json.AsObject.TryGetValue("parameters", out var jsonParameters) && !jsonParameters.IsNull)
                value.Parameters = JsonSerializer.Dict(JsonSerializer.String, JsonSerializer.Json).Deserialize(jsonParameters);
            if (json.AsObject.TryGetValue("requestBody", out var jsonRequestBody) && !jsonRequestBody.IsNull)
                value.RequestBody = JsonSerializer.Json.Deserialize(jsonRequestBody);
            if (json.AsObject.TryGetValue("description", out var jsonDescription) && !jsonDescription.IsNull)
                value.Description = JsonSerializer.String.Deserialize(jsonDescription);
            if (json.AsObject.TryGetValue("server", out var jsonServer) && !jsonServer.IsNull)
                value.Server = ServerObjectJsonSerializer.Instance.Deserialize(jsonServer);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class MediaTypeObjectJsonSerializer : Json.Serialization.IJsonSerializer<MediaTypeObject>
    {
        public static readonly MediaTypeObjectJsonSerializer Instance = new MediaTypeObjectJsonSerializer();

        public Json.ImmutableJson Serialize(MediaTypeObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (value.Schema == null)
                throw new System.ArgumentException("Required property Schema is null", nameof(value));

            var json = new Json.JsonObject();
            json["schema"] = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Serialize(value.Schema);
            if (value.Example != null)
                json["example"] = JsonSerializer.Json.Serialize(value.Example);
            if (value.Examples != null)
                json["examples"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Serialize(value.Examples);
            if (value.Encoding != null)
                json["encoding"] = JsonSerializer.Dict(JsonSerializer.String, EncodingObjectJsonSerializer.Instance).Serialize(value.Encoding);
            return json;
        }

        public MediaTypeObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new MediaTypeObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, MediaTypeObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            value.Schema = MaybeRefSerializer.Create<SchemaObject>(SchemaObjectJsonSerializer.Instance).Deserialize(json["schema"]);
            if (json.AsObject.TryGetValue("example", out var jsonExample) && !jsonExample.IsNull)
                value.Example = JsonSerializer.Json.Deserialize(jsonExample);
            if (json.AsObject.TryGetValue("examples", out var jsonExamples) && !jsonExamples.IsNull)
                value.Examples = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<ExampleObject>(ExampleObjectJsonSerializer.Instance)).Deserialize(jsonExamples);
            if (json.AsObject.TryGetValue("encoding", out var jsonEncoding) && !jsonEncoding.IsNull)
                value.Encoding = JsonSerializer.Dict(JsonSerializer.String, EncodingObjectJsonSerializer.Instance).Deserialize(jsonEncoding);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }

    public sealed class EncodingObjectJsonSerializer : Json.Serialization.IJsonSerializer<EncodingObject>
    {
        public static readonly EncodingObjectJsonSerializer Instance = new EncodingObjectJsonSerializer();

        public Json.ImmutableJson Serialize(EncodingObject value)
        {
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));

            var json = new Json.JsonObject();
            if (value.ContentType != null)
                json["contentType"] = JsonSerializer.String.Serialize(value.ContentType);
            if (value.Headers != null)
                json["headers"] = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Serialize(value.Headers);
            if (value.Style != null)
                json["style"] = JsonSerializer.String.Serialize(value.Style);
            if (value.Explode.HasValue)
                json["explode"] = JsonSerializer.Bool.Serialize(value.Explode.Value);
            json["allowReserved"] = JsonSerializer.Bool.Serialize(value.AllowReserved);
            return json;
        }

        public EncodingObject Deserialize(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            var result = new EncodingObject();
            Deserialize(json, result);
            return result;
        }

        public void Deserialize(Json.ImmutableJson json, EncodingObject value)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            if (value == null)
                throw new System.ArgumentNullException(nameof(value));
            if (json.AsObject.TryGetValue("contentType", out var jsonContentType) && !jsonContentType.IsNull)
                value.ContentType = JsonSerializer.String.Deserialize(jsonContentType);
            if (json.AsObject.TryGetValue("headers", out var jsonHeaders) && !jsonHeaders.IsNull)
                value.Headers = JsonSerializer.Dict(JsonSerializer.String, MaybeRefSerializer.Create<HeaderObject>(HeaderObjectJsonSerializer.Instance)).Deserialize(jsonHeaders);
            if (json.AsObject.TryGetValue("style", out var jsonStyle) && !jsonStyle.IsNull)
                value.Style = JsonSerializer.String.Deserialize(jsonStyle);
            if (json.AsObject.TryGetValue("explode", out var jsonExplode) && !jsonExplode.IsNull)
                value.Explode = JsonSerializer.Bool.Deserialize(jsonExplode);
            if (json.AsObject.TryGetValue("allowReserved", out var jsonAllowReserved) && !jsonAllowReserved.IsNull)
                value.AllowReserved = JsonSerializer.Bool.Deserialize(jsonAllowReserved);
        }

        public bool Test(Json.ImmutableJson json)
        {
            if (json == null)
                throw new System.ArgumentNullException(nameof(json));
            return json.IsObject;
        }
    }
}
