[* json.enabled]
[csharp namespace="OpenAPI"]
module OpenAPISchema
{
    [csharp alias="MaybeRef" json.serializer="MaybeRefSerializer.Create"]
    define TRef<T> T;

    enum JsonSchemaType
    {
        null;
        boolean;
        object;
        array;
        number;
        integer;
        string;
    }

    record SchemaObject
    {
        ?string title;
        ?string description;
        ?json default;
        ?JsonSchemaType type;
        ?TRef<SchemaObject> items;
        ?dict<string, TRef<SchemaObject>> properties;
        ?list<string> required;
        ?list<TRef<SchemaObject>> allOf;
        ?bool nullable = false;
    }

    record ContactObject
    {
        # The identifying name of the contact person/organization.
        ?string name;

        # The URL pointing to the contact information. MUST be in the format of a URL.
        ?string url;

        # The email address of the contact person/organization. MUST be in the format of an email address.
        ?string email;
    }

    record LicenseObject
    {
        # The license name used for the API.
        string name;

        # A URL to the license used for the API. MUST be in the format of a URL.
        ?string url;
    }

    record InfoObject
    {
        # The title of the application.
        string title;

        # A short description of the application. CommonMark syntax MAY be used for rich text representation.
        ?string description;

        # A URL to the Terms of Service for the API. MUST be in the format of a URL.
        ?string termsOfService;

        # The contact information for the exposed API.
        ?ContactObject contact;

        # The license information for the exposed API.
        ?LicenseObject license;

        # The version of the OpenAPI document (which is distinct from the OpenAPI Specification version or the API implementation version).
        string version;
    }

    record ServerVariableObject
    {
        # An enumeration of string values to be used if the substitution options are from a limited set.
        ?list<string> enum;

        #  The default value to use for substitution, and to send, if an alternate value is not supplied. 
        # Unlike the Schema Object's default, this value MUST be provided by the consumer.
        string default;

        # An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.
        ?string description;
    }

    record ServerObject
    {
        # A URL to the target host. This URL supports Server Variables and MAY be relative,
        # to indicate that the host location is relative to the location where the OpenAPI document is being served. 
        # Variable substitutions will be made when a variable is named in {brackets}.
        string url;

        # An optional string describing the host designated by the URL. CommonMark syntax MAY be used for rich text representation.
        ?string description;

        # A map between a variable name and its value. The value is used for substitution in the server's URL template.
        ?dict<string, ServerVariableObject> variables;
    }

    record ComponentsObject
    {
        # An object to hold reusable Schema Objects.
        ?dict<string, TRef<SchemaObject>> schemas;

        # An object to hold reusable Response Objects.
        ?dict<string, TRef<ResponseObject>> responses;

        # An object to hold reusable Parameter Objects.
        ?dict<string, TRef<ParameterObject>> parameters;

        # An object to hold reusable Example Objects.
        ?dict<string, TRef<ExampleObject>> examples;

        # An object to hold reusable Request Body Objects.
        ?dict<string, TRef<RequestBodyObject>> requestBodies;

        # An object to hold reusable Header Objects.
        ?dict<string, TRef<HeaderObject>> headers;

        # An object to hold reusable Security Scheme Objects.
        ?dict<string, TRef<SecuritySchemeObject>> securitySchemes;

        # An object to hold reusable Link Objects.
        ?dict<string, TRef<LinkObject>> links;

        # An object to hold reusable Callback Objects.
        ?dict<string, TRef<CallbackObject>> callbacks;
    }

    # A relative path to an individual endpoint. The field name MUST begin with a slash. 
    # The path is appended (no relative URL resolution) to the expanded URL from the Server Object's url field in order to construct the full URL. 
    # Path templating is allowed. When matching URLs, concrete (non-templated) paths would be matched before their templated counterparts. 
    # Templated paths with the same hierarchy but different templated names MUST NOT exist as they are identical. 
    # In case of ambiguous matching, it's up to the tooling to decide which one to use.
    define Path string;

    record PathItemObject
    {
        # An optional, string summary, intended to apply to all operations in this path.
        ?string summary;

        # An optional, string description, intended to apply to all operations in this path. 
        # CommonMark syntax MAY be used for rich text representation.
        ?string description;

        # A definition of a GET operation on this path.
        ?OperationObject get;

        # A definition of a PUT operation on this path.
        ?OperationObject put;

        # A definition of a POST operation on this path.
        ?OperationObject post;

        # A definition of a DELETE operation on this path.
        ?OperationObject delete;

        # A definition of a OPTIONS operation on this path.
        ?OperationObject options;

        # A definition of a HEAD operation on this path.
        ?OperationObject head;

        # A definition of a PATCH operation on this path.
        ?OperationObject patch;

        # A definition of a TRACE operation on this path.
        ?OperationObject trace;

        # An alternative server array to service all operations in this path.
        ?list<ServerObject> servers;

        # A list of parameters that are applicable for all the operations described under this path. 
        # These parameters can be overridden at the operation level, but cannot be removed there. 
        # The list MUST NOT include duplicated parameters. 
        # A unique parameter is defined by a combination of a name and location. 
        # The list can use the Reference Object to link to parameters that are defined at the OpenAPI Object's components/parameters.
        ?list<TRef<ParameterObject>> parameters;
    }

    record OperationObject
    {
        ?list<string> tags;
        ?string summary;
        ?string description;
        ?ExternalDocumentationObject externalDocs;
        ?string operationId;
        ?list<TRef<ParameterObject>> parameters;
        ?TRef<RequestBodyObject> requestBody;
        ?dict<string, TRef<ResponseObject>> responses;
        ?dict<string, TRef<CallbackObject>> callbacks;
        bool deprecated = false;
        ?list<SecurityRequirementObject> security;
        ?list<ServerObject> servers;
    }

    record OpenAPIObject
    {
        # This string MUST be the semantic version number of the OpenAPI Specification version that the OpenAPI document uses. 
        # The openapi field SHOULD be used by tooling specifications and clients to interpret the OpenAPI document. 
        # This is not related to the API info.version string.
        string openapi;

        # Provides metadata about the API. The metadata MAY be used by tooling as required.
        InfoObject info;

        # An array of Server Objects, which provide connectivity information to a target server. 
        # If the servers property is not provided, or is an empty array, 
        # the default value would be a Server Object with a url value of /.
        ?list<ServerObject> servers;

        # The available paths and operations for the API.
        dict<Path, PathItemObject> paths;

        # An element to hold various schemas for the specification.
        ?ComponentsObject components;
        
        # A declaration of which security mechanisms can be used across the API. 
        # The list of values includes alternative security requirement objects that can be used. 
        # Only one of the security requirement objects need to be satisfied to authorize a request. 
        # Individual operations can override this definition.
        ?list<SecurityRequirementObject> security;

        # A list of tags used by the specification with additional metadata. 
        # The order of the tags can be used to reflect on their order by the parsing tools. 
        # Not all tags that are used by the Operation Object must be declared. 
        # The tags that are not declared MAY be organized randomly or based on the tools' logic. 
        # Each tag name in the list MUST be unique.
        ?list<TagObject> tags;

        # Additional external documentation.
        ?list<ExternalDocumentationObject> externalDocs;
    }

    record ResponseObject
    {
        # A short description of the response. CommonMark syntax MAY be used for rich text representation.
        string description;

        # Maps a header name to its definition. RFC7230 states header names are case insensitive. 
        # If a response header is defined with the name "Content-Type", it SHALL be ignored.
        ?dict<string, TRef<HeaderObject>> headers;

        # A map containing descriptions of potential response payloads. 
        # The key is a media type or media type range and the value describes it. 
        # For responses that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
        ?dict<string, MediaTypeObject> content;

        # A map of operations links that can be followed from the response. 
        # The key of the map is a short name for the link, 
        # following the naming constraints of the names for Component Objects.
        ?dict<string, TRef<LinkObject>> links;
    }

    enum ParameterLocation
    {
        #  Used together with Path Templating, where the parameter value is actually part of the operation's URL. 
        # This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.
        path;

        # Parameters that are appended to the URL. For example, in /items?id=###, the query parameter is id.
        query;

        # Custom headers that are expected as part of the request. Note that RFC7230 states header names are case insensitive.
        header;

        # Used to pass a specific cookie value to the API.
        cookie;
    }

    enum ParameterStyle
    {
        matrix;
        label;
        form;
        simple;
        spaceDelimited;
        pipeDelimited;
        deepObject;
    }

    record ParameterObject
    {
        # The name of the parameter. Parameter names are case sensitive.
        # If in is "path", the name field MUST correspond to a template expression occurring within the path field in the Paths Object. See Path Templating for further information.
        # If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored.
        # For all other cases, the name corresponds to the parameter name used by the in property.
        string name;

        # The location of the parameter. Possible values are "query", "header", "path" or "cookie".
        ParameterLocation in;

        # A brief description of the parameter. This could contain examples of use. 
        # CommonMark syntax MAY be used for rich text representation.
        ?string description;
        
        # Determines whether this parameter is mandatory. 
        # If the parameter location is "path", this property is REQUIRED and its value MUST be true. 
        # Otherwise, the property MAY be included and its default value is false.
        bool required = false;

        # Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.
        bool deprecated = false;

        # Sets the ability to pass empty-valued parameters. 
        # This is valid only for query parameters and allows sending a parameter with an empty value. 
        # If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. 
        # Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.
        bool allowEmptyValue = false;

        // TODO: annotate
        ?ParameterStyle style;

        bool explode = false;

        bool allowReserved = false;

        ?TRef<SchemaObject> schema;

        ?json example;

        ?dict<string, TRef<ExampleObject>> examples;

        ?dict<string, MediaTypeObject> content;
    }

    record HeaderObject
    {
        # A brief description of the parameter. This could contain examples of use. 
        # CommonMark syntax MAY be used for rich text representation.
        ?string description;
        
        # Determines whether this parameter is mandatory. 
        bool required = false;

        # Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.
        bool deprecated = false;

        # Sets the ability to pass empty-valued parameters. 
        # This is valid only for query parameters and allows sending a parameter with an empty value. 
        # If style is used, and if behavior is n/a (cannot be serialized), the value of allowEmptyValue SHALL be ignored. 
        # Use of this property is NOT RECOMMENDED, as it is likely to be removed in a later revision.
        bool allowEmptyValue = false;

        // TODO: annotate
        ?ParameterStyle style;

        bool explode = false;

        bool allowReserved = false;

        ?TRef<SchemaObject> schema;

        ?json example;

        ?dict<string, TRef<ExampleObject>> examples;

        ?dict<string, MediaTypeObject> content;
    }

    record ExampleObject
    {
        # Short description for the example.
        ?string summary;

        # Long description for the example. CommonMark syntax MAY be used for rich text representation.
        ?string description;

        # Embedded literal example. The value field and externalValue field are mutually exclusive. 
        # To represent examples of media types that cannot naturally represented in JSON or YAML, 
        # use a string value to contain the example, escaping where necessary.
        ?json value;

        # A URL that points to the literal example. 
        # This provides the capability to reference examples that cannot easily be included in JSON or YAML documents. 
        # The value field and externalValue field are mutually exclusive.
        ?string externalValue;
    }

    record RequestBodyObject
    {
        # A brief description of the request body. This could contain examples of use. 
        # CommonMark syntax MAY be used for rich text representation.
        ?string description;

        # The content of the request body. The key is a media type or media type range and the value describes it. 
        # For requests that match multiple keys, only the most specific key is applicable. e.g. text/plain overrides text/*
        dict<string, MediaTypeObject> content;

        # Determines if the request body is required in the request. 
        bool required = false;
    }

    record LinkObject
    {
        # A relative or absolute URI reference to an OAS operation. 
        # This field is mutually exclusive of the operationId field, and MUST point to an Operation Object. 
        # Relative operationRef values MAY be used to locate an existing Operation Object in the OpenAPI definition.
        ?string operationRef; 

        # The name of an existing, resolvable OAS operation, as defined with a unique operationId. 
        # This field is mutually exclusive of the operationRef field.
        ?string operationId;

        # A map representing parameters to pass to an operation as specified with operationId or identified via operationRef. 
        # The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation. 
        # The parameter name can be qualified using the parameter location [{in}.]{name} for operations that use the same parameter name in different locations (e.g. path.id).
        ?dict<string, json> parameters;

        # A literal value or {expression} to use as a request body when calling the target operation.
        ?json requestBody;
        
        # A description of the link. CommonMark syntax MAY be used for rich text representation.
        ?string description;
        
        # A server object to be used by the target operation.
        ?ServerObject server;
    }

    record MediaTypeObject
    {
        # The schema defining the content of the request, response, or parameter.
        TRef<SchemaObject> schema;

        # Example of the media type. The example object SHOULD be in the correct format as specified by the media type. 
        # The example field is mutually exclusive of the examples field. 
        # Furthermore, if referencing a schema which contains an example, the example value SHALL override the example provided by the schema.
        ?json example;

        # Examples of the media type. Each example object SHOULD match the media type and specified schema if present. 
        # The examples field is mutually exclusive of the example field. 
        # Furthermore, if referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.
        ?dict<string, TRef<ExampleObject>> examples;

        # A map between a property name and its encoding information. The key, being the property name, MUST exist in the schema as a property. 
        # The encoding object SHALL only apply to requestBody objects when the media type is multipart or application/x-www-form-urlencoded.
        ?dict<string, EncodingObject> encoding;
    }

    // TODO: implement
    define CallbackObject json;

    // TODO: implement
    define SecuritySchemeObject json;

    // TODO: implement
    define SecurityRequirementObject json;
    
    // TODO: implement
    define TagObject json;
    
    // TODO: implement
    define ExternalDocumentationObject json;

    record EncodingObject
    {
        ?string contentType;
        ?dict<string, TRef<HeaderObject>> headers;
        ?string style;
        ?bool explode;
        bool allowReserved = false;
    }
}