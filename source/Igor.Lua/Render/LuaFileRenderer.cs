using Igor.Lua.Model;
using Igor.Text;
using System.Linq;

namespace Igor.Lua.Render
{
    public class LuaFileRenderer : Renderer
    {
        public string FileHeader =>
$@"Author: Igor compiler
Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        private void WriteRequire(string script)
        {
            Line($@"require ""{script}""");
        }

        private void WriteNamespace(string ns)
        {
            Line($"{ns} = {ns} or {{}}");
        }

        private void WriteEnum(LuaEnum e)
        {
            var maybeLocal = e.Namespace == null ? "" : "local ";
            switch (e.Style)
            {
                case EnumStyle.Enum:
                    {
                        Line($"{maybeLocal}{e.Name} = enum(");
                        Indent();
                        Blocks(e.Fields.Select(f => f.Name.Quoted()), delimiter: ",");
                        Outdent();
                        Line(")");
                    }
                    break;

                case EnumStyle.Table:
                default:
                    {
                        Line($"{maybeLocal}{e.Name} = {{");
                        Indent();
                        Blocks(e.Fields.Select(f => $@"{f.Name} = {f.Value},"));
                        Outdent();
                        Line("}");
                    }
                    break;
            }
            EmptyLine();
            if (e.Namespace != null)
                Line($"{e.Namespace}.{e.Name} = {e.Name}");
        }

        private void DeclareClass(LuaClass c)
        {
            switch (c.Style)
            {
                case RecordStyle.Class:
                default:
                    {
                        var super = c.Super == null ? "" : ", " + c.Super;
                        var maybeLocal = c.Namespace == null ? "" : "local ";
                        Line($"{maybeLocal}{c.Name} = class({c.Name}{super})");
                    }
                    break;

                case RecordStyle.Data:
                    {
                        var maybeLocal = c.Namespace == null ? "" : "local ";
                        Line($"{maybeLocal}{c.Name} = {{}}");
                    }
                    break;
            }
            EmptyLine();
            if (c.Namespace != null)
                Line($"{c.Namespace}.{c.Name} = {c.Name}");
        }

        private void WriteClass(LuaClass c)
        {
            Blocks(c.Functions, emptyLineDelimiter: true);
        }

        public void WriteFile(LuaFile file)
        {
            Comment(FileHeader, "-- ");
            EmptyLine();
            ForEach(file.Requires, WriteRequire, emptyLineDelimiter: false);
            ForEach(file.Namespaces, WriteNamespace, emptyLineDelimiter: true);
            ForEach(file.Enums, WriteEnum, emptyLineDelimiter: true);
            ForEach(file.Classes, DeclareClass, emptyLineDelimiter: true);
            ForEach(file.Classes, WriteClass, emptyLineDelimiter: true);
            Blocks(file.Declarations, emptyLineDelimiter: true);
        }

        protected override EmptyLineMode GetEmptyLineModeBetweenLines(string prev, string next)
        {
            if (prev.StartsWith("function "))
                return EmptyLineMode.Forbid;
            if (prev.EndsWith(" then"))
                return EmptyLineMode.Forbid;
            else if (next == "end")
                return EmptyLineMode.Forbid;
            else
                return EmptyLineMode.Keep;
        }

        public static string Render(LuaFile file)
        {
            var renderer = new LuaFileRenderer { Tab = "    ", RemoveDoubleSpaces = true };
            renderer.WriteFile(file);
            return renderer.Build();
        }
    }
}
