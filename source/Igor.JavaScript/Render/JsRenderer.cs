using Igor.Text;
using Igor.JavaScript.Model;
using System.Collections.Generic;

namespace Igor.JavaScript.Render
{
    public class JsRenderer : Renderer
    {
        public string FileHeader =>
$@"Author: Igor compiler
Compiler version: {Version.HeaderVersionString}
DO NOT EDIT THIS FILE - it is machine generated";

        public void WriteDoc(string annotation, bool allowSingleDoc = false, int maxWidth = 160)
        {
            if (string.IsNullOrWhiteSpace(annotation))
                return;
            var lines = TextHelper.Lines(annotation);
            if (lines.Length == 1 && allowSingleDoc && annotation.Length < 120)
            {
                Line($"/** {annotation} */");
            }
            else
            {
                Line("/**");
                Comment(annotation, " * ", maxWidth);
                Line(" */");
            }
        }

        public void WriteFile(JsFile file)
        {
            void WriteDeclaration(JsDeclaration decl)
            {
                WriteDoc(decl.Annotation);
                Block(decl.Text);
            }

            Comment(FileHeader, "// ");
            EmptyLine();
            ForEach(file.Imports, WriteImport);
            EmptyLine();
            ForEach(file.Declarations, WriteDeclaration, emptyLineDelimiter: true);
        }

        private void WriteImport(JsImport import)
        {
            var imports = new List<string>();
            if (import.DefaultExport != null)
                imports.Add(import.DefaultExport);
            if (import.ImportAll)
                imports.Add("*");
            Line($"import {imports.JoinStrings(", ")} from '{import.Module}';");
        }

        protected override EmptyLineMode GetEmptyLineModeBetweenLines(string prev, string next)
        {
            if (prev.EndsWith("{"))
                return EmptyLineMode.Forbid;
            else if (prev.EndsWith(":"))
                return EmptyLineMode.Forbid;
            else if (prev.StartsWith("[") && prev.EndsWith("]"))
                return EmptyLineMode.Forbid;
            else if (next == "else")
                return EmptyLineMode.Forbid;
            else if (next == "}")
                return EmptyLineMode.Forbid;
            else
                return EmptyLineMode.Keep;
        }

        public JsRenderer() : base()
        {
            Tab = "  ";
            RemoveDoubleSpaces = true;
        }

        public static Renderer Create() => new JsRenderer();

        public static string Render(JsFile file)
        {
            var renderer = new JsRenderer();
            renderer.WriteFile(file);
            return renderer.Build();
        }
    }
}
